import sys, os.path, timeit
sys.path.insert(0, os.path.abspath('../../../lib'))
sys.path.insert(0, os.path.abspath('../'))
import cmdArgs, util

def main():
    print('''    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. (4,613,732)''')
    N = 4000000
    n = 10
    r = 3
    t = [1]
    o = sys.modules[__name__]
    u = usage
    util.runTests({'N': N}, {'n': n, 'r': r, 't': t, 'o': o, 'u': u})

def usage(a1={}, a2={}):
    if 'N' in a1: N = a1['N']
    if 'n' in a2: n = a2['n']
    if 'r' in a2: r = a2['r']
    if 't' in a2: t = a2['t']
    print("    Usage: 'N n r t' where N ({}) max #, n ({}) loops, r ({}) repeats, t ({}) test#".format(N, n, r, t))

def test1(args={'dbg': 1}):
    '''(fn < N)'''
    test = 'test1'
    dbg = 1
#    print('{} args={}'.format(test, args))
    if 'dbg' in args: dbg = args['dbg']
    if 'N'   in args:   N = args['N']   
    if dbg == 0: print('.', end='')
    global f
    f = [1, 1]
#    print('{}'.format(f))
    fSum, n = 0, 0
    fn = 1
    while fn < N:
        fn = fib()
        if fn >= N: break
        if fn % 2 == 0:
            fSum += fn
#            print('{} {} {}'.format(n, fn, fSum))
#        else:
#            print('{} {}'.format(n, fn))
        n += 1
    if dbg: print('\n{} {:,}'.format(test, fSum), end=' ')

def fib():
    fn = f[0] + f[1]
    f[0] = f[1]
    f[1] = fn
    return fn

if __name__ == "__main__":
    main()